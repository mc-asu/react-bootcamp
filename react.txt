# Function Components
- historically used for simpler "dumb" Components
- write logic in a JS Function
- no render method needed, just return content

function Dog() {
    return `<div>Dog</div>`
}

# Class Components      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.jsx</code> and save to test HMR
        </p>
      </div>
- needs render
- write logic in a JS Class
- traditional React component

class Dog extends React.component {
    render() {
        return <div>dog</dog>
    }
}

## Function vs Class Components
- both can accept props and render content
- function components couldn't use important features like state and lifecycle methods
- full-featured function components with hooks

#JSX - Javascript Extension / Javascript + XAML
- not legal JS -> has to be transpiled to JS with Babel
- more strict than HTML

super() vs super(props)

there is no "this" in the constructor without super()
super() is used in class constructors to call the constructor of the parent class.
e.g.
class Parent {
  constructor() {
    this.parentProperty = 'Parent Property';
  }
}

class Child extends Parent {
  constructor() {
    super(); // Calls the constructor of the Parent class
    this.childProperty = 'Child Property';
  }
}

const childInstance = new Child();
console.log(childInstance.parentProperty); // Outputs: Parent Property
console.log(childInstance.childProperty); // Outputs: Child Property


super(props) is used in React class components to access the props of the component within the constructor.
e.g.
class MyComponent extends React.Component {
  constructor(props) {
    super(props); // Accesses the props of the component
    this.state = {
      myState: 'Some state',
    };
  }
}

Changing state
setState: It takes an object that describes the way the state should change and it patches the state object
Think of set state as a request rather than an immediate command to update a component for better perceived
performance. React may delay it and then update several components in a single pass.
React does not guarantee that the state changes are applied immediately, so this is why it's important
- can't setState on a component which is not mounted
- don't setState inside a render, will probably refresh the whole page
e.g.
const [count, setCount] = useState(0)
<button onClick={() => setCount((count) => count + 1)}>
    count is {count}
</button>

State as props
It's basically a pattern for creating a defining your application structure.
So what we'll have is a stateful parent component, a smart component that passes its state values down
as props to the dumber stateless components.

In react the idea is generalized as downward data flow

Updating existing state

// Using an object
setState({ key: value });

// Using a callback function
setState((prevState) => {
  // Calculate the new state based on the previous state
  return { key: prevState.key + 1 };
});

When you pass a callback function to setState, React guarantees that the callback will be executed after the state has been updated.
This is particularly useful when you need to perform computations based on the previous state before updating.

So, while using a callback is not always required, it's crucial when you want to ensure the
correct order of state updates and subsequent actions in your React components.

Mutating State the Safe way

In React, directly mutating the state is not considered a safe practice. React relies on the immutability of state to efficiently update the UI and trigger re-renders.
If you directly mutate the state, React might not detect the change, leading to unexpected behavior.

TLDR: Create a copy and mutate.

Here are the recommended approaches for updating state in React:

Using the useState Hook:

Use the useState Hook to declare state variables and the corresponding updater functions. React guarantees that the state variables returned by useState are immutable.

import React, { useState } from 'react';

const MyComponent = () => {
  const [count, setCount] = useState(0);

  const increment = () => {
    // Use the updater function to update state immutably
    setCount((prevCount) => prevCount + 1);
  };

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
};

export default MyComponent;


export default MyComponent;
Using the useReducer Hook:

For more complex state logic, consider using the useReducer Hook. It allows you to update state based on the previous state and an action.

import React, { useReducer } from 'react';

const countReducer = (state, action) => {
  switch (action.type) {
    case 'INCREMENT':
      return { count: state.count + 1 };
    default:
      return state;
  }
};

const MyComponent = () => {
  const [state, dispatch] = useReducer(countReducer, { count: 0 });

  const increment = () => {
    // Dispatch an action to update state immutably
    dispatch({ type: 'INCREMENT' });
  };

  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={increment}>Increment</button>
    </div>
  );
};

export default MyComponent;

Using Immer for Complex State:

For deeply nested or complex state, you can use a library like Immer to make state updates more readable and maintainable.

import React, { useState } from 'react';
import produce from 'immer';

const MyComponent = () => {
  const [data, setData] = useState({ value: 1 });

  const updateData = () => {
    // Use Immer to update state in a more readable way
    setData((draft) => {
      draft.value += 1;
    });
  };

  return (
    <div>
      <p>Data Value: {data.value}</p>
      <button onClick={updateData}>Update Data</button>
    </div>
  );
};

export default MyComponent;

In summary, always use the provided updater functions (setCount, dispatch, etc.) or libraries like Immer to ensure safe and predictable state updates in React. Avoid direct state mutation.

React Hooks:

As of my last knowledge update in January 2022, the following are the main React hooks provided by the React library:

1. **useState:**
   - Manages state in functional components.
   - Example:
     ```jsx
     const [state, setState] = useState(initialState);
     ```

2. **useEffect:**
   - Performs side effects in functional components (e.g., data fetching, subscriptions, manual DOM manipulations).
   - Example:
     ```jsx
     useEffect(() => {
       // Side effect logic here
     }, [dependencies]);
     ```

3. **useContext:**
   - Provides access to the value of a React context.
   - Example:
     ```jsx
     const contextValue = useContext(MyContext);
     ```

4. **useReducer:**
   - Manages more complex state logic by using a reducer function.
   - Example:
     ```jsx
     const [state, dispatch] = useReducer(reducer, initialState);
     ```

5. **useCallback:**
   - Memoizes a callback function, preventing unnecessary re-creation on re-renders.
   - Example:
     ```jsx
     const memoizedCallback = useCallback(() => {
       // Memoized function logic
     }, [dependencies]);
     ```

6. **useMemo:**
   - Memoizes a value, preventing unnecessary re-computation on re-renders.
   - Example:
     ```jsx
     const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
     ```

7. **useRef:**
   - Creates a mutable object that persists across renders.
   - Example:
     ```jsx
     const myRef = useRef(initialValue);
     ```

8. **useImperativeHandle:**
   - Customizes the instance value that is exposed when using `React.forwardRef`.
   - Example:
     ```jsx
     useImperativeHandle(ref, () => ({
       // Exposed instance value
     }), [dependencies]);
     ```

9. **useLayoutEffect:**
   - Similar to `useEffect`, but fires synchronously after all DOM mutations.
   - Example:
     ```jsx
     useLayoutEffect(() => {
       // DOM mutations
     }, [dependencies]);
     ```

10. **useDebugValue:**
    - Customizes the label displayed in the React DevTools for a custom hook.
    - Example:
      ```jsx
      useDebugValue(value);
      ```

These are the core React hooks available as of my last update. Keep in mind that React evolves, and new features may have been introduced since then. Always refer to the official React documentation for the latest information: [React Hooks API Reference](https://reactjs.org/docs/hooks-reference.html).

Avoid inline arrow functions/bind to prevent performance issues. Use HOCs or Memoization